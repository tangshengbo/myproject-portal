<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:p="http://www.springframework.org/schema/p"
       xmlns:mvc="http://www.springframework.org/schema/mvc"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
      http://www.springframework.org/schema/beans/spring-beans-4.3.xsd
      http://www.springframework.org/schema/context
      http://www.springframework.org/schema/context/spring-context.xsd
      http://www.springframework.org/schema/mvc
      http://www.springframework.org/schema/mvc/spring-mvc-4.3.xsd
      http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-4.3.xsd ">

    <!--s使用默认处理器过滤静态资源文件-->
    <mvc:default-servlet-handler/>
    <!--开启Spring注解配置功能-->
    <context:annotation-config/>
    <!-- 启动注解驱动的Spring MVC功能，注册请求url和注解POJO类方法的映射-->
    <mvc:annotation-driven>
        <mvc:message-converters>
            <!--使用GsonConvertor 排在默认JacksonConvertor前作为application/json序列化转换器 -->
            <bean id="jsonConvertor"
                  class="org.springframework.http.converter.json.GsonHttpMessageConverter"/>
        </mvc:message-converters>
    </mvc:annotation-driven>

    <!-- 启动包扫描功能，以便注册带有@Controller、@Service、@repository、@Component等注解的类成为spring的bean -->
    <!--<context:component-scan base-package="com.tangshengbo.controller" />-->
    <!-- 启动对@AspectJ注解的支持  -->
    <aop:aspectj-autoproxy proxy-target-class="true" expose-proxy="true"/>
    <!-- 使用 Swagger Restful API文档时，添加此注解 -->
    <bean class="com.tangshengbo.core.RestApiConfig"/>
    <mvc:resources mapping="swagger-ui.html" location="classpath:/META-INF/resources/"/>
    <mvc:resources mapping="/webjars/**" location="classpath:/META-INF/resources/webjars/"/>
    <!-- 对模型视图名称的解析，在请求时模型视图名称添加前后缀 -->
    <!--<bean class="org.springframework.web.servlet.view.InternalResourceViewResolver" p:prefix="/WEB-INF/view/"-->
          <!--p:suffix=".jsp" p:viewClass="org.springframework.web.servlet.view.JstlView"/>-->


    <bean class="org.thymeleaf.spring4.view.ThymeleafViewResolver" p:templateEngine-ref="springTemplateEngine"
          p:contentType="text/html;charset=UTF-8" p:characterEncoding="UTF-8"/>
    <bean id="springTemplateEngine" class="org.thymeleaf.spring4.SpringTemplateEngine"
          p:templateResolver-ref="contextTemplateResolver"/>
    <bean id="contextTemplateResolver" class="org.thymeleaf.templateresolver.ServletContextTemplateResolver"
          p:prefix="/WEB-INF/templates/"
          p:suffix=".html" p:templateMode="HTML" p:characterEncoding="UTF-8"/>
    <!-- 完成请求和注解POJO的映射 -->
    <!--<beans profile="dev">-->
        <bean class="org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter">
            <property name="messageConverters">
                <list>
                    <bean
                            class="org.springframework.http.converter.json.MappingJackson2HttpMessageConverter">
                        <property name="supportedMediaTypes">
                            <list>
                                <value>application/json;charset=UTF-8</value>
                            </list>
                        </property>
                    </bean>
                </list>
            </property>
            <property name="webBindingInitializer" ref="configurableWebBindingInitializer"/>
            <property name="order" value="-1"/>
        </bean>
        <mvc:interceptors>
            <mvc:interceptor>
                <mvc:mapping path="/**"/>
                <bean class="com.tangshengbo.interceptor.LogInterceptor"/>
            </mvc:interceptor>
        </mvc:interceptors>
        <bean id="configurableWebBindingInitializer" class="org.springframework.web.bind.support.ConfigurableWebBindingInitializer">
            <property name="conversionService" ref="defaultFormattingConversionService"/>
            <property name="propertyEditorRegistrar" ref="customPropertyEditorRegistrar"/>
        </bean>
    <!--</beans>-->

    <!-- 单独为webapplicationContext注入placeholder  -->
    <!--<context:property-placeholder ignore-unresolvable="true"-->
    <!--location="classpath:config.properties"/>-->
    <!--<bean id="myAutowiredAnnotationBeanPostProcessorMvc" class="com.tangshengbo.service.component.MyAutowiredAnnotationBeanPostProcessor"/>-->
</beans>